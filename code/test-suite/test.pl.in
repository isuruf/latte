#!/usr/bin/env perl -w

## usage: ./test.pl "COUNT-PARAMS" ["PROBLEMS..."]

## Environment variables:
##  SET_ULIMIT  -- Set if we should use "ulimit" to stop computations that take too long.
##  USE_INSTALLED_BINARY -- Set if we should use the installed binary instead of the $builddir binary.
##  COPY_BINARY -- Set if we should make a local copy of the binary, so that long-running 
#                  tests are not disturbed by recompiles.  Does not work with --enable-shared.

use File::Basename;
use File::Path;

# count always prints the number of lattice points in the file
# numOfLatticePoints. In order to check the output of the test,
# we must open the file and verify the number of lattice points
# stored there.
$OUTPUT_FILE_NAME = "numOfLatticePoints";

# add file names and lattice points to an array
# We obtained the results marked "non-authoritative" ourselves, 
# using various flavors of the algorithm; we hope they are correct.
# The other ones are obtained from other sources; we believe 
# they are correct. 
my @files_nums = (
   # FILENAME::CORRECT-ANSWER::TIME-LIMIT
   "example1::3::1",
   "example2::2::1",
   "example3::2::1",
   "24_cell::33::5",
   "cuww1::1::1",
   "magic4x4::8::10",
   "magic5x5::::86400",
   # Bug tests
   "tests/missing-newline.latte::::1",
   "tests/missing-newline-2.latte::::1",
   "tests/missing-newline-3.latte::::1",
   "tests/implied-equation.latte::1::1",
   "tests/preproc-integrally-empty.latte::0::1",
   # 
   "hickerson/hickerson-7::8::1",
   "hickerson/hickerson-8::22::1",
   "hickerson/hickerson-9::9::1",
   "hickerson/hickerson-10::24::10",
   "hickerson/hickerson-11::12::60",
   "hickerson/hickerson-12::38::60",
   "hickerson/hickerson-13::14::60",   # some methods exceed this time
   "hickerson/hickerson-14::32::60",   # some methods exceed this time
   "hickerson/hickerson-15::20::60",   # some methods exceed this time
   "hickerson/hickerson-16::54::600",  # some methods exceed this time
   "hickerson/hickerson-17::18::86400",
   "hickerson/hickerson-18::44::5400",
   "hickerson/hickerson-19::20::86400",
   "hickerson/hickerson-20::74::86400",
   "hickerson/hickerson-24::96::86400",
   "hickerson/hickerson-28::92::86400",
   "hickerson/hickerson-32::122::86400",
   "hickerson/hickerson-36::138::86400",
   "mcallister/HivePolytopeImpossible::::86400",
    "mcallister/HivePolytopeMinutes1::14438636::120", #not-authoritative
    "mcallister/HivePolytopeMinutes2::4890291::300",  #not-authoritative
    "mcallister/HivePolytopeMinutes3::1990152::300",  #not-authoritative
    "mcallister/HivePolytopeMinutes4::0::300",        #not-authoritative
    "mcallister/HivePolytopeMinutes5::2129924::300",	#not-authoritative
    "mcallister/HivePolytopeSeconds::5231::30",      #not-authoritative
    "yoshida/24_cell_latte::33::2",
    "yoshida/3x3x3_semi_10.equ::1273125::20", # all-primal methods exceed this time
    "yoshida/3x3x3_semi_11.equ::2467302::20", # all-primal methods exceed this time
    "yoshida/3x3x3_semi_12.equ::4547458::20", # all-primal methods exceed this time
    "yoshida/3x3x3_semi_13.equ::8027223::20", # all-primal methods exceed this time
    "yoshida/3x3x3_semi_14.equ::13648170::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_15.equ::22454470::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_16.equ::35884827::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_17.equ::55883718::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_18.equ::85034962::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_1.equ::12::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_2.equ::132::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_3.equ::847::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_4.equ::3921::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_5.equ::14286::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_6.equ::43687::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_7.equ::116757::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_8.equ::280656::20",# all-primal methods exceed this time
    "yoshida/3x3x3_semi_9.equ::619219::20",# all-primal methods exceed this time
    "yoshida/4flow_1.equ::34441480172695101274::1",
    "yoshida/4flow_2.equ::28493245103068590026::1",
    "yoshida/4flow_3.equ::91608082255943644656::1",
    "yoshida/4x4Table1::1225914276768514::3",
    "yoshida/4x4Table10::63313191414342827754566531364533378588986467::20",
    "yoshida/4x4Table11::24::20",
    "yoshida/4x4Table2::993810896945891::20",
    "yoshida/4x4Table3::25387360604030::20",
    "yoshida/4x4Table4::13571026063401838164668296635065899923152079::20",
    "yoshida/4x4Table5::646911395459296645200004000804003243371154862::20",
    "yoshida/4x4Table6::319720249690111437887229255487847845310463475::20",
    "yoshida/4x4Table7::322773560821008856417270275950599107061263625::20",
    "yoshida/4x4Table8::6977523720740024241056075121611021139576919::20",
    "yoshida/4x4Table9::861316343280649049593236132155039190682027614::20",
    "yoshida/4x5_1::316052820930116909459822049052149787748004963058022997262397::60",
    "yoshida/4x5_2::23196436596128897574829611531938753::60",
    "yoshida/4x5_3::23196436596128897574829611531938753::60",
    "yoshida/5flow_1.equ::6817997013081449330251623043931489475270::2",
    "yoshida/5flow_2.equ::277145720781272784955528774814729345461::2",
    "yoshida/5flow_3.equ::710305971948234346520365668331191134724::2",
    "yoshida/aardallenstra.equ::0::1",
    "yoshida/cube::16::1",
    "yoshida/cube2::8::1",
    "yoshida/digraph4_10.equ::179777378508547::1",
    "yoshida/digraph4_1.equ::223::1",
    "yoshida/digraph4_2.equ::330::1",
    "yoshida/digraph4_3.equ::3002::1",
    "yoshida/digraph4_4.equ::785528058::1",
    "yoshida/digraph4_5.equ::20673947895::1",
    "yoshida/digraph4_6.equ::14100406254::1",
    "yoshida/digraph4_7.equ::1906669380::1",
    "yoshida/digraph4_8.equ::19470466783680::1",
    "yoshida/digraph4_9.equ::106036300535520::1",
    "yoshida/digraph5_10.equ::65348330279808617817420057::1",
    "yoshida/digraph5_1.equ::14805::1",
    "yoshida/digraph5_2.equ::6950747024::1",
    "yoshida/digraph5_3.equ::222850218035543::1",
    "yoshida/digraph5_4.equ::563408416219655157542748::1",
    "yoshida/digraph5_5.equ::1108629405144880240444547243::1",
    "yoshida/digraph5_6.equ::3997121684242603301444265332::1",
    "yoshida/digraph5_7.equ::160949617742851302259767600::1",
    "yoshida/digraph5_8.equ::15711217216898158096466094::1",
    "yoshida/digraph5_9.equ::102815492358112722152328::1",
    "yoshida/hyp_simp_4_1.equ::4::1",
    "yoshida/hyp_simp_4_2.equ::6::1",
    "yoshida/hyp_simp_4_3.equ::4::1",
    "yoshida/hyp_simp_5_1.equ::5::1",
    "yoshida/hyp_simp_5_2.equ::10::1",
    "yoshida/hyp_simp_5_3.equ::10::1",
    "yoshida/hyp_simp_5_4.equ::5::1",
    "yoshida/hyp_simp_6_1.equ::6::1",
    "yoshida/hyp_simp_6_2.equ::15::1",
    "yoshida/hyp_simp_6_3.equ::20::1",
    "yoshida/hyp_simp_6_4.equ::15::1",
    "yoshida/hyp_simp_6_5.equ::6::1",
    "yoshida/hyp_simp_7_1.equ::7::3",
    "yoshida/hyp_simp_7_2.equ::21::3",
    "yoshida/hyp_simp_7_3.equ::35::3",
    "yoshida/hyp_simp_7_4.equ::35::3",
    "yoshida/hyp_simp_7_5.equ::21::3",
    "yoshida/hyp_simp_7_6.equ::7::3",
    "yoshida/knapsack1.equ::42::3",
    "yoshida/knapsack2.equ::92378::1",
    "yoshida/knapsackbaby1.equ::7::1",
    "yoshida/knapsackbaby2.equ::2::1",
    "yoshida/mountExample1::35353::10",
    "yoshida/mountExample2::3187528::30",   # some methods exceed this
    "yoshida/mountExample3::97080796::360", # some methods exceed this
    "yoshida/mountExample4::1326849651::360", # some methods exceed this
    "yoshida/mountExample5::::86400",
    "yoshida/test4x4_1::665711555567792389878908993624629379187969880179721169068827951::3", # some exceed
    "yoshida/test4x4_2::63292704423941655080293971395348848807454253204720526472462015::3", # some exceed
    "yoshida/test4x4_3::43075357146173570492117291685601604830544643769252831337342557::3", # some exceed
    "yoshida/tru_cube_latte::0::1",
    "yoshida/tru_simplex_latte::0::1",
    "yoshida/3x3x4_1.equ::::720",
## Following are identical to hickerson/*
##     "yoshida/HD::::86400",
##     "yoshida/HD1",
##     "yoshida/HD10::::86400",
##     "yoshida/HD11::::86400",
##     "yoshida/HD12::::86400",
##     "yoshida/HD13::::86400",
##     "yoshida/HD14::::86400",
##     "yoshida/HD15::::86400",
##     "yoshida/HD16::::86400",
##     "yoshida/HD17::::86400",
##     "yoshida/HD18::::86400",
##     "yoshida/HD2",
##     "yoshida/HD3",
##     "yoshida/HD4",
##     "yoshida/HD5",
##     "yoshida/HD6",
##     "yoshida/HD7::::1800",
##     "yoshida/HD8::::86400",
##     "yoshida/HD9::::1800",
    "yoshida/cuww1_1.equ::::1",
    "yoshida/cuww2_1.equ::::1",
    "yoshida/cuww3_1.equ::::1",
    "yoshida/cuww4_1.equ::::2",
    "yoshida/cuww5_1.equ::::30",
    "yoshida/dean1::::1",
    "yoshida/dean2::::86400",
    "yoshida/dean3::::86400",
    "yoshida/prob10_1.equ::::86400",
    "yoshida/prob1_1.equ::::60",
    "yoshida/prob2_1.equ::::60",
    "yoshida/prob3_1.equ::::60",
    "yoshida/prob4_1.equ::::60",
    "yoshida/prob5_1.equ::::60",
    "yoshida/prob6_1.equ::::1800",
    "yoshida/prob7_1.equ::::1800",
    "crosspolytope/cross-polytope-2.vrep::5::1",
    "crosspolytope/cross-polytope-3.vrep::7::1",
    "crosspolytope/cross-polytope-4.vrep::9::1",
    "crosspolytope/cross-polytope-5.vrep::11::10",
    "crosspolytope/cross-polytope-6.vrep::13::20",   # some may exceed
    "crosspolytope/cross-polytope-7.vrep::15::20",   # some exceed...
    "crosspolytope/cross-polytope-8.vrep::17::20",
    "crosspolytope/cross-polytope-9.vrep::19::30",
    "crosspolytope/cross-polytope-10.vrep::21::60",
    "crosspolytope/cross-polytope-11.vrep::::200",
    "crosspolytope/cross-polytope-12.vrep::::720",
    "crosspolytope/cross-polytope-13.vrep::::1800",
    "crosspolytope/cross-polytope-14.vrep::::8000",
    "crosspolytope/cross-polytope-15.vrep::::86400",
    "crosspolytope/cross-polytope-16.vrep::::86400",
    "crosspolytope/cross-polytope-17.vrep::::86400",
    "crosspolytope/cross-polytope-18.vrep::::86400",
    "crosspolytope/cross-polytope-19.vrep::::86400",
    "crosspolytope/cross-polytope-20.vrep::::86400",
    "crosspolytope/cross-polytope-21.vrep::::86400",
    "crosspolytope/cross-polytope-22.vrep::::86400",
    "crosspolytope/cross-polytope-23.vrep::::86400",
    "crosspolytope/cross-polytope-24.vrep::::86400",
    "crosspolytope/cross-polytope-25.vrep::::86400",
    "crosspolytope/cross-polytope-26.vrep::::86400",
    "crosspolytope/cross-polytope-27.vrep::::86400",
    "crosspolytope/cross-polytope-28.vrep::::86400",
    "crosspolytope/cross-polytope-29.vrep::::86400",
    "crosspolytope/cross-polytope-30.vrep::::86400"
);

if ($ENV{MAXRUNTIME}) {
    $MAXRUNTIME = $ENV{MAXRUNTIME}
}
else {
#$MAXRUNTIME = 864000;
#$MAXRUNTIME = 86400;
#$MAXRUNTIME = 1800;
$MAXRUNTIME = 720;
#$MAXRUNTIME = 60;
}

chop($LATTEDIR = `cd \`dirname $0\`; cd ../..; pwd`);
$PARAMETERS = $ARGV[0];



#$EXAMPLESDIR = "$LATTEDIR/EXAMPLES";
$EXAMPLESDIR = "@abs_top_srcdir@/EXAMPLES";
chop($DATE = `/bin/date +%Y-%m-%d`);
chop($HOSTNAME = `hostname`);
#$LOGDIR = "/home/mkoeppe/w/latte/results/log-$DATE-count $PARAMETERS-pid$$\@$HOSTNAME";
$LOGNAME = "log-$DATE-count $PARAMETERS-pid$$\@$HOSTNAME";
$LOGNAME =~ s![ /]!_!g;
$LOGDIR = "results/$LOGNAME";

print "Logging to '$LOGDIR/log'\n";

mkpath($LOGDIR) or die;
chdir($LOGDIR) or die;

if ($ENV{USE_INSTALLED_BINARY}) {
    $COUNT = "@prefix@/bin/count";
}
else {
    $COUNT = "$LATTEDIR/code/latte/count";
}

if ($ENV{COPY_BINARY}) {
    # We hard-link the executable here and execute it from here, so long-running tests are not disturbed by recompiles.
    system("ln $COUNT .");
    $COUNT = "./count";
}

$COMMAND = "$COUNT $PARAMETERS";

if ($ENV{SET_ULIMIT}) {
    # Enforce CPU limits using `ulimit'.  Useful for manual testing
    # and creating benchmark tables.  Not portable: Does not work on
    # Cygwin.  Also introduces non-deterministic fails, which is why
    # we don't use it by default in `make check'. --mkoeppe
    $COMMAND = "ulimit -t $MAXRUNTIME; ulimit -c 0; $COMMAND";
}
else {
    # Robust, portable; but some examples might take very long.
}    

open SUMMARY, ">summary" or die;
print SUMMARY "Running with time limit ", $MAXRUNTIME, "\n";

if ($ARGV[1]) {
    @files_nums = split(' ', $ARGV[1]);
}

$num_errors = 0;

foreach $file_num (@files_nums)
{
   # data is of the form filename::num_lattice_points
   @tmp = split('::', $file_num);
   $file_name = $tmp[0];
   $num_lattice_pts = $tmp[1];
   $time_limit = $tmp[2];

   unlink($OUTPUT_FILE_NAME);
   print "$file_name: \t";
   print SUMMARY "$file_name: \t";
   if ($time_limit && ($time_limit > $MAXRUNTIME)) {
       print "Skipped.";
       print SUMMARY "Skipped.";
   }
   else {
       if ($file_name =~ m/.*[.]vrep$/) {
	   $ret_val = system( "$COMMAND vrep $EXAMPLESDIR/$file_name >> log 2>&1 ");
       }
       else {
	   $ret_val = system( "$COMMAND $EXAMPLESDIR/$file_name >> log 2>&1 ");
       }
       if ($ret_val != 0) {
	   print "ERROR STATUS $ret_val";
	   print SUMMARY "ERROR STATUS $ret_val";
	   $num_errors++;
       } else {
	   open IN, "<$OUTPUT_FILE_NAME";
	   if (!IN) {
	       print "Can't open $OUTPUT_FILE_NAME";
	       print SUMMARY "Can't open $OUTPUT_FILE_NAME";
	       $num_errors++;
	   }
	   else {
	       while ($line = <IN>) {
		   chomp $line;
		   # line should contain the number of lattice points
		   #print "Found numOfLatticePoints = $line\n";
		   print "Result: $line  ";
		   print SUMMARY "Result: $line  ";
		   if ($num_lattice_pts) {
		       if ($line != $num_lattice_pts) {
			   print "##### WRONG #####";
			   print SUMMARY "WRONG";
			   $num_errors++;
		       } else {
			   print "GOOD";
			   print SUMMARY "GOOD";
			   if (open IN, "<totalTime") {
			       $time = <IN>;
			       chomp $time;
			       print " Time: $time sec";
			       print SUMMARY " Time: $time sec";
			   }
		       }
		   }
		   else {
		       if (open IN, "<totalTime") {
			   $time = <IN>;
			   chomp $time;
			   print " Time: $time sec";
			   print SUMMARY " Time: $time sec";
		       }
		   }
	       }
	       close(IN);
	   }
       }
   }
   print "\n";
   print SUMMARY "\n";
}

if ($num_errors > 0) {
    exit(1);
}

